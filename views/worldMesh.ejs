<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mesh Renderer - <%= worldId %></title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: 'Consolas', 'Monaco', monospace;
      background: #1a1a1a;
    }
    
    #canvas {
      display: block;
      width: 100vw;
      height: 100vh;
    }
    
    #info {
      position: absolute;
      top: 20px;
      left: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: #fff;
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 13px;
      line-height: 1.6;
      pointer-events: none;
      backdrop-filter: blur(10px);
    }
    
    #info h3 {
      margin: 0 0 10px 0;
      font-size: 16px;
      color: #4CAF50;
    }
    
    #info .stat {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin: 5px 0;
    }
    
    #info .label {
      color: #888;
    }
    
    #info .value {
      color: #fff;
      font-weight: bold;
    }
    
    #controls {
      position: absolute;
      bottom: 20px;
      left: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: #fff;
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 12px;
      pointer-events: none;
      backdrop-filter: blur(10px);
    }
    
    #controls h4 {
      margin: 0 0 10px 0;
      font-size: 14px;
      color: #2196F3;
    }
    
    #toggle-btn {
      position: absolute;
      top: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      font-family: inherit;
      box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
      transition: all 0.2s;
    }
    
    #toggle-btn:hover {
      background: #45a049;
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(76, 175, 80, 0.4);
    }
    
    #toggle-btn:active {
      transform: translateY(0);
    }
    
    .fps-counter {
      color: #4CAF50;
      font-weight: bold;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  
  <div id="info">
    <h3>🚀 Mesh Renderer (Hybrid System)</h3>
    <div class="stat">
      <span class="label">FPS:</span>
      <span class="value fps-counter" id="fps">--</span>
    </div>
    <div class="stat">
      <span class="label">Vertices:</span>
      <span class="value" id="vertices">--</span>
    </div>
    <div class="stat">
      <span class="label">Triangles:</span>
      <span class="value" id="triangles">--</span>
    </div>
    <div class="stat">
      <span class="label">Build Time:</span>
      <span class="value" id="buildTime">--</span>
    </div>
    <div class="stat">
      <span class="label">Position:</span>
      <span class="value" id="position">--</span>
    <div class="stat">
      <span class="label">Direction:</span>
      <span class="value" id="direction">--</span>
    </div>
  </div>
  <div class="controls-panel">
    <h3>📋 Controls</h3>
    <p><strong>W/A/S/D</strong> – Move</p>
    <p><strong>Space/Shift</strong> – Up/Down</p>
    <p><strong>Mouse</strong> – Look around</p>
    <p><strong>F</strong> – Toggle Fog</p>
    <p><strong>Esc</strong> – Release pointer</p>
  </div>
  
  <div style="position: absolute; top: 20px; right: 20px; display: flex; gap: 10px;">
    <button class="toggle-btn secondary" onclick="location.href='/worlds/<%= worldId %>'">🔵 DDA</button>
    <button class="toggle-btn" onclick="location.href='/worlds/<%= worldId %>/svdag'">🌳 SVDAG</button>
  </div>
  
  <script type="module">
    import { MeshRenderer } from '/js/meshRenderer.js';
    const canvas = document.getElementById('canvas');
    const worldId = '<%= worldId %>';
    
    // FPS counter
    let frameCount = 0;
    let lastTime = performance.now();
    let fps = 0;
    
    function updateFPS() {
      frameCount++;
      const currentTime = performance.now();
      if (currentTime - lastTime >= 1000) {
        fps = Math.round(frameCount * 1000 / (currentTime - lastTime));
        document.getElementById('fps').textContent = fps;
        frameCount = 0;
        lastTime = currentTime;
      }
    }
    
    // Update info display
    function updateInfo(renderer) {
      if (renderer.mesh) {
        document.getElementById('vertices').textContent = renderer.mesh.stats.vertexCount.toLocaleString();
        document.getElementById('triangles').textContent = renderer.mesh.stats.triangleCount.toLocaleString();
        document.getElementById('buildTime').textContent = `${renderer.mesh.stats.buildTime.toFixed(2)}ms`;
      }
      
      const pos = renderer.camera.position;
      const dir = renderer.camera.direction;
      document.getElementById('position').textContent = `${pos[0].toFixed(1)}, ${pos[1].toFixed(1)}, ${pos[2].toFixed(1)}`;
      document.getElementById('direction').textContent = `${dir[0].toFixed(0)}°, ${dir[1].toFixed(0)}°`;
    }
    
    // Set canvas size
    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      if (window.renderer) {
        window.renderer.resize();
      }
    }
    
    // Initial resize (before renderer exists)
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
    window.addEventListener('resize', resizeCanvas);
    
    // Load world data and initialize renderer
    console.log('Loading world:', worldId);
    
    try {
      const response = await fetch(`/api/worlds/${worldId}`);
      const worldData = await response.json();
      
      console.log('World data loaded:', worldData);
      
      // Initialize mesh renderer
      const renderer = new MeshRenderer(canvas);
      window.renderer = renderer; // Make accessible to resize handler
      await renderer.initialize(worldData);
      
      console.log('Mesh renderer initialized!');
      
      // Update info panel
      updateInfo(renderer);
      
      // Camera controls
      const keys = {};
      const moveSpeed = 3.0;  // Slower, more controlled movement
      const lookSpeed = 0.05; // Very slow, precise look speed
      let fogEnabled = true;  // Toggle fog on/off
      let pointerLocked = false;
      
      window.addEventListener('keydown', (e) => {
        keys[e.key.toLowerCase()] = true;
        if (e.key === 'Escape') {
          document.exitPointerLock();
        }
        if (e.key === 'f' || e.key === 'F') {
          fogEnabled = !fogEnabled;
          renderer.setFogEnabled(fogEnabled);
          console.log('Fog:', fogEnabled ? 'ON' : 'OFF');
        }
      });
      
      window.addEventListener('keyup', (e) => {
        keys[e.key.toLowerCase()] = false;
      });
      
      // Click to lock pointer
      canvas.addEventListener('click', () => {
        if (!pointerLocked) {
          canvas.requestPointerLock();
        }
      });
      
      // Track pointer lock state
      document.addEventListener('pointerlockchange', () => {
        pointerLocked = document.pointerLockElement === canvas;
        if (pointerLocked) {
          console.log('✅ Pointer locked - move mouse to look around');
        } else {
          console.log('❌ Pointer released - click canvas to re-lock');
        }
      });
      
      // Mouse movement (when locked) - ONLY ROTATES, DOESN'T MOVE!
      document.addEventListener('mousemove', (e) => {
        if (!pointerLocked) return;
        
        // ONLY change direction (yaw/pitch), NOT position!
        // Note: Yaw increases = turn right (positive X movement)
        renderer.camera.direction[0] -= e.movementX * lookSpeed; // NEGATED for correct direction
        renderer.camera.direction[1] = Math.max(-89, Math.min(89, renderer.camera.direction[1] + e.movementY * lookSpeed)); // NEGATED for correct direction
        
        // Debug camera
        // console.log('Camera dir:', renderer.camera.direction);
      });
      
      // Animation loop
      function animate() {
        requestAnimationFrame(animate);
        
        // Update camera based on input
        const dt = 1 / 60; // Assume 60 FPS for movement
        
        const yaw = renderer.camera.direction[0] * Math.PI / 180;
        const pitch = renderer.camera.direction[1] * Math.PI / 180;
        
        // Flight-style controls: W/S moves toward where you're looking (including pitch)
        const forward = [
          Math.cos(pitch) * Math.sin(yaw),
          Math.sin(pitch),
          Math.cos(pitch) * Math.cos(yaw)
        ];
        
        // Strafe is always horizontal (perpendicular to yaw)
        const right = [
          Math.cos(yaw),
          0,
          -Math.sin(yaw)
        ];
        
        const speed = moveSpeed * dt;
        
        // W/S: Move forward/back in the direction you're looking (includes Y!)
        if (keys['w']) {
          renderer.camera.position[0] += forward[0] * speed;
          renderer.camera.position[1] += forward[1] * speed;
          renderer.camera.position[2] += forward[2] * speed;
        }
        if (keys['s']) {
          renderer.camera.position[0] -= forward[0] * speed;
          renderer.camera.position[1] -= forward[1] * speed;
          renderer.camera.position[2] -= forward[2] * speed;
        }
        if (keys['a']) {
          renderer.camera.position[0] -= right[0] * speed;
          renderer.camera.position[2] -= right[2] * speed;
        }
        if (keys['d']) {
          renderer.camera.position[0] += right[0] * speed;
          renderer.camera.position[2] += right[2] * speed;
        }
        if (keys[' ']) {
          renderer.camera.position[1] += speed;
        }
        if (keys['shift']) {
          renderer.camera.position[1] -= speed;
        }
        
        // Render frame
        renderer.render();
        
        // Update FPS and info
        updateFPS();
        updateInfo(renderer);
      }
      
      animate();
      
    } catch (error) {
      console.error('Failed to initialize mesh renderer:', error);
      document.getElementById('info').innerHTML = `
        <h3 style="color: #f44336;">❌ Error</h3>
        <p>${error.message}</p>
        <p style="color: #888; font-size: 11px;">${error.stack}</p>
      `;
    }
  </script>
</body>
</html>
