<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enter World - Visual World Generator</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    #world-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      cursor: crosshair;
    }

    #hud {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      background: rgba(0, 0, 0, 0.7);
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 14px;
      line-height: 1.6;
      pointer-events: none;
      font-family: 'Courier New', monospace;
    }

    #controls-help {
      position: absolute;
      bottom: 20px;
      left: 20px;
      color: white;
      background: rgba(0, 0, 0, 0.7);
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 12px;
      line-height: 1.8;
    }


    #loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 24px;
      text-align: center;
    }

    .btn {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      background: var(--accent-primary);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.2s;
    }

    .btn:hover {
      background: var(--accent-secondary);
      transform: translateY(-2px);
    }
  </style>
</head>
<body>
  <canvas id="world-canvas"></canvas>
  
  <div id="loading">
    <div style="font-size: 28px; margin-bottom: 20px;">üåç Select a World</div>
    <div id="world-list" style="max-width: 600px; margin: 20px auto;">
      <div style="text-align: center; padding: 40px; color: #888;">Loading worlds...</div>
    </div>
  </div>

  <div id="hud" style="display: none;">
    <div><strong>üìç Position:</strong> <span id="pos">0, 0, 0</span></div>
    <div><strong>üëÅÔ∏è Direction:</strong> <span id="dir">0, 0</span></div>
    <div><strong>üèîÔ∏è Height:</strong> <span id="height">0</span>m</div>
    <div><strong>üéØ FPS:</strong> <span id="fps">0</span></div>
  </div>

  <div id="controls-help">
    <div><strong>üéÆ Controls</strong></div>
    <div><kbd>W/A/S/D</kbd> - Move</div>
    <div><kbd>Space/Shift</kbd> - Up/Down</div>
    <div><kbd>Mouse</kbd> - Look around</div>
    <div><kbd>Esc</kbd> - Release pointer</div>
  </div>


  <div id="renderer-nav" style="position: absolute; top: 20px; right: 20px; display: none; flex-direction: column; gap: 10px; align-items: flex-end;">
    <div style="display: flex; gap: 10px;">
      <button class="btn" id="svdag-btn" style="background: #FF9800; min-width: 100px;">üå≥ SVDAG</button>
      <button class="btn" id="mesh-btn" style="background: #4CAF50; min-width: 100px;">üé® Mesh</button>
    </div>
    <button class="btn" style="width: 210px;" onclick="location.href='/'">‚Üê Back to Editor</button>
  </div>
  
  <script>
    let currentWorldId = '';
    
    function getWorldId() {
      // First check if we stored it
      if (currentWorldId) return currentWorldId;
      // Otherwise extract from current URL
      const match = window.location.pathname.match(/\/worlds\/([^\/]+)/);
      return match ? match[1] : '';
    }
    
    function setWorldId(worldId) {
      currentWorldId = worldId;
      // Update button links
      document.getElementById('svdag-btn').onclick = () => location.href = `/worlds/${worldId}/svdag`;
      document.getElementById('mesh-btn').onclick = () => location.href = `/worlds/${worldId}/mesh`;
    }
  </script>

  <script type="module">
    import { WorldRenderer } from '/js/worldRenderer.js';

    const canvas = document.getElementById('world-canvas');
    const loading = document.getElementById('loading');
    const hud = document.getElementById('hud');
    const worldList = document.getElementById('world-list');

    let renderer;

    // Load available worlds
    async function loadWorldList() {
      try {
        const response = await fetch('/api/worlds');
        const worlds = await response.json();

        if (worlds.length === 0) {
          worldList.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #888;">
              <p>No worlds available.</p>
              <p style="font-size: 14px; margin-top: 10px;">Generate and export a world from the editor first!</p>
            </div>
          `;
          return;
        }

        // Sort by creation date (newest first)
        worlds.sort((a, b) => new Date(b.created) - new Date(a.created));

        worldList.innerHTML = worlds.map(world => `
          <div style="background: rgba(255,255,255,0.05); padding: 20px; margin-bottom: 10px; border-radius: 8px; cursor: pointer; transition: all 0.2s;"
               onmouseover="this.style.background='rgba(255,255,255,0.1)'"
               onmouseout="this.style.background='rgba(255,255,255,0.05)'"
               onclick="loadWorld('${world.id}')">
            <div style="font-size: 18px; font-weight: bold;">üåç ${world.id}</div>
            <div style="font-size: 14px; color: #aaa; margin-top: 5px;">
              Seed: ${world.seed} | Resolution: ${world.resolution}√ó${world.resolution}
            </div>
            <div style="font-size: 12px; color: #888; margin-top: 5px;">
              Created: ${new Date(world.created).toLocaleString()}
            </div>
          </div>
        `).join('');

      } catch (error) {
        console.error('Failed to load world list:', error);
        worldList.innerHTML = `
          <div style="text-align: center; padding: 40px; color: #f88;">
            ‚ùå Failed to load worlds: ${error.message}
          </div>
        `;
      }
    }

    // Load a specific world
    window.loadWorld = async function(worldId) {
      try {
        console.log('Loading world:', worldId);
        
        // Store world ID for navigation buttons
        setWorldId(worldId);
        
        const response = await fetch(`/api/worlds/${worldId}`);
        if (!response.ok) throw new Error('Failed to load world');
        
        const worldData = await response.json();
        console.log('World data loaded:', worldData);

        // Hide loading, show HUD and navigation
        loading.style.display = 'none';
        hud.style.display = 'block';
        document.getElementById('renderer-nav').style.display = 'flex';

        // Initialize renderer
        renderer = new WorldRenderer(canvas, worldData);
        await renderer.init();
        renderer.start();

        // Update HUD
        setInterval(() => {
          if (renderer.camera) {
            const pos = renderer.camera.position;
            const rot = renderer.camera.rotation;
            document.getElementById('pos').textContent = 
              `${pos[0].toFixed(1)}, ${pos[1].toFixed(1)}, ${pos[2].toFixed(1)}`;
            document.getElementById('dir').textContent = 
              `${(rot[0] * 180 / Math.PI).toFixed(0)}¬∞, ${(rot[1] * 180 / Math.PI).toFixed(0)}¬∞`;
            document.getElementById('height').textContent = pos[1].toFixed(1);
            document.getElementById('fps').textContent = Math.round(renderer.fps || 0);
          }
        }, 100);

      } catch (error) {
        console.error('Failed to load world:', error);
        alert(`Failed to load world: ${error.message}`);
        location.reload(); // Go back to world list
      }
    };

    // Load world list on page load
    loadWorldList();
  </script>
</body>
</html>
