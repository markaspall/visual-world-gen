<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Infinite World Viewer - <%= worldId %></title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: monospace;
    }
    
    #canvas {
      display: block;
      width: 100vw;
      height: 100vh;
    }
    
    #info {
      position: fixed;
      top: 10px;
      left: 10px;
      background: rgba(0, 0, 0, 0.8);
      color: #0f0;
      padding: 15px;
      border-radius: 5px;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      z-index: 1000;
      min-width: 250px;
    }
    
    #info h3 {
      margin: 0 0 10px 0;
      color: #0ff;
      font-size: 16px;
    }
    
    #info .stat {
      margin: 5px 0;
      display: flex;
      justify-content: space-between;
    }
    
    #info .label {
      color: #888;
    }
    
    #info .value {
      color: #0f0;
      font-weight: bold;
    }
    
    #loading {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.8);
      color: #ff0;
      padding: 10px 20px;
      border-radius: 20px;
      display: none;
    }
    
    #controls {
      position: fixed;
      top: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.7);
      color: #fff;
      padding: 15px;
      border-radius: 5px;
      font-size: 12px;
    }
    
    #controls h4 {
      margin: 0 0 10px 0;
      color: #0ff;
    }
    
    #controls div {
      margin: 5px 0;
      color: #ccc;
    }
    
    #controls kbd {
      background: #333;
      padding: 2px 6px;
      border-radius: 3px;
      font-family: monospace;
      color: #0f0;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  
  <div id="info">
    <h3>üåç Infinite World</h3>
    <div class="stat">
      <span class="label">FPS:</span>
      <span class="value" id="fps">--</span>
    </div>
    <div class="stat">
      <span class="label">Debug:</span>
      <span class="value" id="debugMode">Depth</span>
    </div>
    <div class="stat">
      <span class="label">Chunks:</span>
      <span class="value" id="chunks">--</span>
    </div>
    <div class="stat">
      <span class="label">Pos:</span>
      <span class="value" id="position">--</span>
    </div>
    <div class="stat">
      <span class="label">Chunk:</span>
      <span class="value" id="chunkCoord">--</span>
    </div>
    <div class="stat">
      <span class="label">Looking At:</span>
      <span class="value" id="centerHit">--</span>
    </div>
    <div class="stat">
      <span class="label">Fetches:</span>
      <span class="value" id="networkFetches">0</span>
    </div>
  </div>
  
  <div id="controls">
    <h4>üìã Controls</h4>
    <div><kbd>W</kbd><kbd>A</kbd><kbd>S</kbd><kbd>D</kbd> Move</div>
    <div><kbd>Space</kbd> Up ‚Ä¢ <kbd>Shift</kbd> Down</div>
    <div><kbd>Mouse</kbd> Look ‚Ä¢ <kbd>Esc</kbd> Release</div>
    <div><kbd>1</kbd> Normal ‚Ä¢ <kbd>F2</kbd> Depth (color)</div>
    <div><kbd>F3</kbd> Chunks ‚Ä¢ <kbd>4</kbd> Normals</div>
    <div><kbd>5</kbd> Steps (üî• heatmap) ‚Ä¢ <kbd>6</kbd> DAG</div>
    <div><kbd>F</kbd> Freeze chunks</div>
  </div>
  
  <div id="loading">Loading chunks...</div>

  <script type="module">
    import { ChunkedSvdagRenderer } from '/js/chunkedSvdagRenderer.js';
    
    const worldId = '<%= worldId %>';
    
    // Initialize (lower resolution for better FPS)
    const canvas = document.getElementById('canvas');
    const RENDER_SCALE = 0.5; // 0.5 = half res = 4x faster
    canvas.width = Math.floor(window.innerWidth * RENDER_SCALE);
    canvas.height = Math.floor(window.innerHeight * RENDER_SCALE);
    canvas.style.width = window.innerWidth + 'px';
    canvas.style.height = window.innerHeight + 'px';
    
    const renderer = new ChunkedSvdagRenderer(canvas, worldId);
    await renderer.initialize();
    
    // DEBUG: Expose renderer globally
    window.renderer = renderer;
    window.debugChunk = () => {
      const chunk = renderer.chunkManager.chunks.get('0,4,0');
      if (chunk) {
        console.log('üß™ Debug chunk (0,4,0):', {
          position: chunk.position,
          materialNodes: chunk.materialSVDAG?.nodes?.length || 0,
          materialLeaves: chunk.materialSVDAG?.leaves?.length || 0,
          materialRootIdx: chunk.materialSVDAG?.rootIdx,
          firstLeaves: chunk.materialSVDAG?.leaves ? Array.from(chunk.materialSVDAG.leaves).slice(0, 10) : []
        });
      } else {
        console.log('‚ùå Debug chunk not found');
      }
    };
    
    // Initial chunk load
    document.getElementById('loading').style.display = 'block';
    await renderer.updateChunks();
    document.getElementById('loading').style.display = 'none';
    
    // Input handling
    const keys = {};
    const mouse = { locked: false, dx: 0, dy: 0 };
    
    window.addEventListener('keydown', (e) => {
      keys[e.code] = true;
      
      // Debug mode toggle (1, F2, F3, 4-6 keys)
      if (e.code === 'Digit1') renderer.debugMode = 0; // Normal
      if (e.code === 'F2') renderer.debugMode = 1; // Depth
      if (e.code === 'F3') renderer.debugMode = 2; // Chunks
      if (e.code === 'Digit4') renderer.debugMode = 3; // Normals
      if (e.code === 'Digit5') renderer.debugMode = 4; // Steps
      if (e.code === 'Digit6') renderer.debugMode = 5; // DAG Activity
      
      // Freeze chunks (F key) - stop loading new chunks
      if (e.code === 'KeyF') {
        window.freezeChunks = !window.freezeChunks;
        console.log(window.freezeChunks ? '‚ùÑÔ∏è Chunks FROZEN' : '‚úÖ Chunks UNFROZEN');
      }
    });
    
    window.addEventListener('keyup', (e) => {
      keys[e.code] = false;
      if (e.code === 'Escape') {
        document.exitPointerLock();
      }
    });
    
    canvas.addEventListener('click', () => {
      canvas.requestPointerLock();
    });
    
    document.addEventListener('pointerlockchange', () => {
      mouse.locked = document.pointerLockElement === canvas;
    });
    
    document.addEventListener('mousemove', (e) => {
      if (mouse.locked) {
        mouse.dx = e.movementX;
        mouse.dy = e.movementY;
      }
    });
    
    // Frame counter
    let frameCount = 0;
    let lastFpsUpdate = performance.now();
    let lastChunkUpdate = performance.now();
    
    // Render loop
    async function renderLoop() {
      // Handle input
      let forward = 0, right = 0, up = 0;
      if (keys['KeyW']) forward += 1;
      if (keys['KeyS']) forward -= 1;
      if (keys['KeyD']) right += 1;
      if (keys['KeyA']) right -= 1;
      if (keys['Space']) up += 1;
      if (keys['ShiftLeft'] || keys['ShiftRight']) up -= 1;
      
      if (forward || right || up) {
        renderer.moveCamera(forward, right, up);
      }
      
      if (mouse.dx || mouse.dy) {
        renderer.rotateCamera(mouse.dx, -mouse.dy);
        mouse.dx = 0;
        mouse.dy = 0;
      }
      
      // Update chunks periodically (every 3 seconds, unless frozen)
      const now = performance.now();
      if (now - lastChunkUpdate > 3000 && !window.freezeChunks) {
        document.getElementById('loading').style.display = 'block';
        await renderer.updateChunks();
        document.getElementById('loading').style.display = 'none';
        lastChunkUpdate = now;
      }
      
      // Render
      await renderer.render();
      
      // Update stats
      frameCount++;
      if (now - lastFpsUpdate > 1000) {
        const fps = Math.round(frameCount * 1000 / (now - lastFpsUpdate));
        document.getElementById('fps').textContent = fps;
        frameCount = 0;
        lastFpsUpdate = now;
        
        const pos = renderer.camera.position;
        const debugModes = ['Normal', 'Depth', 'Chunks', 'Normals', 'Steps üî•', 'DAG'];
        document.getElementById('debugMode').textContent = debugModes[renderer.debugMode];
        document.getElementById('position').textContent = 
          `${Math.round(pos[0])}, ${Math.round(pos[1])}, ${Math.round(pos[2])}`;
        
        // Current chunk
        const chunkX = Math.floor(pos[0] / 32);
        const chunkY = Math.floor(pos[1] / 32);
        const chunkZ = Math.floor(pos[2] / 32);
        document.getElementById('chunkCoord').textContent = `${chunkX}, ${chunkY}, ${chunkZ}`;
        
        // Center ray hit (what you're looking at)
        const centerHit = renderer.centerRayHit || { dist: -1, blockId: 0, chunk: -1 };
        if (centerHit.dist >= 0) {
          document.getElementById('centerHit').textContent = 
            `Dist:${Math.round(centerHit.dist)} Block:${centerHit.blockId} Chunk:${centerHit.chunk}`;
        } else {
          document.getElementById('centerHit').textContent = 'Miss';
        }
        
        document.getElementById('chunks').textContent = renderer.chunkManager.chunks.size;
        document.getElementById('networkFetches').textContent = renderer.chunkManager.stats.chunksFetched;
      }
      
      requestAnimationFrame(renderLoop);
    }
    
    renderLoop();
    
    // Handle resize
    window.addEventListener('resize', () => {
      canvas.width = Math.floor(window.innerWidth * RENDER_SCALE);
      canvas.height = Math.floor(window.innerHeight * RENDER_SCALE);
      canvas.style.width = window.innerWidth + 'px';
      canvas.style.height = window.innerHeight + 'px';
    });
  </script>
</body>
</html>
